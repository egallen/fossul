---
# tasks file for VirtualMachine delete
- name: Get Virtual Machine
  k8s_info:
    api_version: v1
    kind: VirtualMachine
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: virtualmachine

- name: Set Defaults
  set_fact:
    is_backup: false
    fossul_policy: daily

- name: Determine if backup enabled via annotations
  set_fact:
    is_backup: "{{ item.value }}"
  loop: "{{ lookup('dict', virtualmachine.resources[0].metadata.annotations) }}"
  when: item.key == "fossul.io/backup"

- name: Get the fossul namespace
  set_fact:
    fossul_namespace: "{{ item.value }}"
  loop: "{{ lookup('dict', virtualmachine.resources[0].metadata.annotations) }}"
  when: item.key == "fossul.io/namespace"

- name: Get the fossul server url from annotations
  set_fact:
    fossul_server_url: "{{ item.value }}"
  loop: "{{ lookup('dict', virtualmachine.resources[0].metadata.annotations) }}"
  when: item.key == "fossul.io/url" 

- name: Get the fossul policy from annotations
  set_fact:
    fossul_policy: "{{ item.value }}"
  loop: "{{ lookup('dict', virtualmachine.resources[0].metadata.annotations) }}"
  when: item.key == "fossul.io/policy"    

- name: Set Fossul Server URL to default
  set_fact:
    fossul_server_url: "http://fossul-server.{{ fossul_namespace }}.svc.cluster.local:8000"
  when: (fossul_server_url is not defined) and (is_backup | bool)

- name: Get Fossul Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: fossul-secret
    namespace: "{{ fossul_namespace }}"
  register: secret     
  when: is_backup | bool

- name: Get Fossul Password
  set_fact:
    fossul_password: "{{ item.value | b64decode }}" 
  with_dict: "{{ secret.resources[0].data }}"
  when: (is_backup | bool) and (item.key == "fossul-password") 
  
- name: Delete Backup Schedule
  uri:
    url: "{{fossul_server_url}}/deleteSchedule/{{ ansible_operator_meta.namespace }}/{{ ansible_operator_meta.name }}/{{ fossul_policy }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{fossul_password}}"
    method: GET
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: schedule
  when: is_backup | bool

- name: print schedule
  debug:
    msg: "{{ schedule }}" 
  when: is_backup | bool     

- name: Delete Backup Config
  uri:
    url: "{{fossul_server_url}}/deleteConfigDir/{{ ansible_operator_meta.namespace }}/{{ ansible_operator_meta.name }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{fossul_password}}"
    method: GET
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: config
  when: is_backup | bool

- name: print delete config
  debug:
    msg: "{{ config }}"  
  when: is_backup | bool    

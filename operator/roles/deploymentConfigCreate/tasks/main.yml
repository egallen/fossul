# tasks file for DeploymentConfig create
- name: Get Deployment Config
  k8s_info:
    api_version: apps.openshift.io/v1
    kind: DeploymentConfig
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: deploymentconfig

- name: Set Defaults
  set_fact:
    fossul_namespace: fossul
    is_backup: false
    fossul_policy: daily
    fossul_retention: 7
    fossul_app_plugin: ""
    fossul_storage_plugin: "csi.so"
    fossul_archive_plugin: ""
    fossul_cron_schedule: "0 0 * * *"

- name: Determine if backup enabled via annotations
  set_fact:
    is_backup: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/backup"

- name: Get the fossul namespace
  set_fact:
    fossul_namespace: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/namespace"

- name: Get the fossul server url from annotations
  set_fact:
    fossul_server_url: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/url" 

- name: Get the fossul policy from annotations
  set_fact:
    fossul_policy: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/policy"   

- name: Get the fossul retention from annotations
  set_fact:
    fossul_retention: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/retention" 

- name: Get the fossul app plugin
  set_fact:
    fossul_app_plugin: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/app_plugin" 

- name: Get the fossul storage plugin
  set_fact:
    fossul_storage_plugin: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/storage_plugin" 

- name: Get the fossul archive plugin
  set_fact:
    fossul_archive_plugin: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/archive_plugin"   

- name: Get the fossul cron schedule
  set_fact:
    fossul_cron_schedule: "{{ item.value }}"
  loop: "{{ lookup('dict', deploymentconfig.resources[0].metadata.annotations, wantlist=True) }}"
  when: item.key == "fossul.io/cron_schedule"   

- name: Set Fossul Server URL to default
  set_fact:
    fossul_server_url: "http://fossul-server.{{ fossul_namespace }}.svc.cluster.local:8000"
  when: (fossul_server_url is not defined) and (is_backup | bool)

- name: Get Fossul Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: fossul-secret
    namespace: "{{ fossul_namespace }}"
  register: secret     
  when: is_backup | bool

- name: Get Fossul Password
  set_fact:
    fossul_password: "{{ item.value | b64decode }}" 
  with_dict: "{{ secret.resources[0].data }}"
  when: (is_backup | bool) and (item.key == "fossul-password") 

- name: Create Backup Profile
  uri:
    url: "{{ fossul_server_url }}/addProfile/{{ ansible_operator_meta.namespace }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{ fossul_password }}"
    method: GET
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: profile
  when: is_backup | bool 
  
- name: print profile
  debug:
    msg: "{{ profile }}"     
  when: is_backup | bool 

- name: Create Backup Config
  uri:
    url: "{{ fossul_server_url }}/addConfig/{{ ansible_operator_meta.namespace }}/{{ ansible_operator_meta.name }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{ fossul_password }}"
    method: POST
    body: "{ \"accessWithinCluster\": \"true\",
             \"appPlugin\": \"{{ fossul_app_plugin }}\",
             \"storagePlugin\": \"{{ fossul_storage_plugin }}\",
             \"archivePlugin\": \"{{ fossul_archive_plugin }}\",
             \"containerPlatform\": \"openshift\",
             \"jobRetention\": 50,
             \"autoDiscovery\": true,
             \"backupRetentions\": [{\"policy\": \"{{ fossul_policy }}\",\"retentionNumber\": {{ fossul_retention }}}]},
     }"
    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: config
  when: is_backup | bool 

- name: print config
  debug:
    msg: "{{ config }}"
  when: is_backup | bool     

- name: Create Storage Plugin Config
  uri:
    url: "{{ fossul_server_url }}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ ansible_operator_meta.name }}/csi.so"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{ fossul_password }}"
    method: POST
    body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
             \"BackupName\": \"{{ ansible_operator_meta.name }}\",
             \"DeploymentName\": \"{{ ansible_operator_meta.name }}\",
             \"DeploymentType\": \"DeploymentConfig\",
             \"PvcDeletionTimeout\": \"300\",
             \"SnapshotTimeoutSeconds\": \"180\",
             \"OverwritePvcOnRestore\": \"true\",
             \"RestoreToNewPvc\": \"true\",
             
     }"

    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: app_config
  when: is_backup | bool 

- name: print app config
  debug:
    msg: "{{ app_config }}"       
  when: is_backup | bool 

- name: Create Backup Schedule
  uri:
    url: "{{ fossul_server_url }}/addSchedule/{{ ansible_operator_meta.namespace }}/{{ ansible_operator_meta.name }}/{{ fossul_policy }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "admin"
    password: "{{ fossul_password }}"
    method: POST
    body: "{ \"value\": \"{{ fossul_cron_schedule }}\" }"
    body_format: json
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: schedule
  when: is_backup | bool 

- name: print schedule
  debug:
    msg: "{{ schedule }}"   
  when: is_backup | bool    
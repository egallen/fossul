---
# tasks file for BackupConfig
- name: Set Default Username
  set_fact:
    username: "admin"
  when: username is not defined  
  
- name: Set Fossul namespace 
  set_fact:
    fossul_namespace: "fossul-operator"
  when: fossul_namespace is not defined

- name: Set Fossul policy 
  set_fact:
    policy: "daily"
  when: policy is not defined

- name: Set Fossul retention 
  set_fact:
    retention: 7
  when: retention is not defined  

- name: Set Fossul app plugin 
  set_fact:
    app_plugin: ""
  when: app_plugin is not defined    

- name: Set Fossul archive plugin 
  set_fact:
    archive_plugin: ""
  when: archive_plugin is not defined    

- name: Set Fossul job retention 
  set_fact:
    job_retention: 50
  when: job_retention is not defined      

- name: Set Fossul auto discovery
  set_fact:
    auto_discovery: "false"
  when: auto_discovery is not defined    

- name: Set Fossul pvc deletion timeout
  set_fact:
    pvc_deletion_timeout: "300"
  when: pvc_deletion_timeout is not defined

- name: Set Fossul snapshot timeout
  set_fact:
    snapshot_timeout: "180"
  when: snapshot_timeout is not defined

- name: Set Fossul pvc overwrite
  set_fact:
    overwrite_pvc_on_restore: "false"
  when: overwrite_pvc_on_restore is not defined

- name: Set Fossul pvc restore target
  set_fact:
    restore_to_new_pvc: "false"
  when: restore_to_new_pvc is not defined      

- name: Set Postgresql Host 
  set_fact:
    pq_host: postgresql.{{ ansible_operator_meta.namespace }}.svc.cluster.local
  when: pq_host is not defined     

- name: Set Postgresql Port 
  set_fact:
    pq_port: 5432
  when: pq_port is not defined      

- name: Set Postgresql Secret 
  set_fact:
    postgresql_secret: postgresql
  when: postgresql_secret is not defined               

- name: Set Mariadb Secret 
  set_fact:
    mariadb_secret: mariadb
  when: mariadb_secret is not defined               

- name: Set MySql Secret 
  set_fact:
    mysl_secret: mysql
  when: mysql_secret is not defined     

- name: Set Fossul Server URL 
  set_fact:
    fossul_server_url: "http://fossul-server.{{ fossul_namespace }}.svc.cluster.local:8000"
  when: fossul_server_url is not defined

- name: Set Default Fossul Storage Plugin 
  set_fact:
    storage_plugin: "csi.so"
  when: storage_plugin is not defined  

- name: Get Fossul Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: fossul-secret
    namespace: "{{ fossul_namespace }}"
  register: secret

- name: Get Postgresql Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ postgresql_secret }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: pq_secret
  when: (app_plugin is defined) and (app_plugin == "postgres.so")        

- name: Get Postgresql Database 
  set_fact:
    pq_db: "{{ item.value | b64decode }}" 
  with_dict: "{{ pq_secret.resources[0].data }}"
  when: (item.key == "database-name") and (app_plugin == "postgres.so") and (pq_db is not defined)

- name: Get Postgresql User 
  set_fact:
    pq_user: "{{ item.value | b64decode }}" 
  with_dict: "{{ pq_secret.resources[0].data }}"
  when: (item.key == "database-name") and (app_plugin == "postgres.so") and (pq_user is not defined)

- name: Get Postgresql Password 
  set_fact:
    pq_password: "{{ item.value | b64decode }}" 
  with_dict: "{{ pq_secret.resources[0].data }}"
  when: (item.key == "database-name") and (app_plugin == "postgres.so") and (pq_password is not defined)       

- name: Get Fossul Password
  set_fact:
    fossul_password: "{{ item.value | b64decode }}" 
  with_dict: "{{ secret.resources[0].data }}"
  when: item.key == "fossul-password"

- name: Create Backup Profile
  uri:
    url: "{{fossul_server_url}}/addProfile/{{ ansible_operator_meta.namespace }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "{{username}}"
    password: "{{fossul_password}}"
    method: GET
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: profile
  failed_when: profile.json.messages[0].level == "ERROR"

- name: print profile
  debug:
    msg: "{{ profile }}"     

- name: Create Backup Config
  uri:
    url: "{{fossul_server_url}}/addConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "{{username}}"
    password: "{{fossul_password}}"
    method: POST
    body: "{ \"accessWithinCluster\": \"true\",
             \"appPlugin\": \"{{ app_plugin }}\",
             \"storagePlugin\": \"{{ storage_plugin }}\",
             \"archivePlugin\": \"{{ archive_plugin }}\",
             \"containerPlatform\": \"openshift\",
             \"jobRetention\": {{ job_retention }},
             \"autoDiscovery\": {{ auto_discovery | lower }},
             \"backupRetentions\": [{\"policy\": \"{{ policy }}\",\"retentionNumber\": {{ retention }}}]},
     }"
    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: config
  failed_when: config.json.messages[0].level == "ERROR"

- name: print config
  debug:
    msg: "{{ config }}"
    
- name: Create Kubevirt App Plugin Config
  uri:
    url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ app_plugin }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "{{username}}"
    password: "{{fossul_password}}"
    method: POST
    body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
             \"VmName\": \"{{ deployment_name }}\",
     }"
    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: app_config
  when: (app_plugin is defined) and (app_plugin == "kubevirt.so")
  failed_when: app_config.json.messages[0].level == "ERROR"

- name: Create Postgresql App Plugin Config
  uri:
    url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ app_plugin }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "{{username}}"
    password: "{{fossul_password}}"
    method: POST
    body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
             \"DeploymentType\": \"{{ deployment_type }}\",
             \"DeploymentName\": \"{{ deployment_name }}\",
             \"DisableRestoreHooks\": \"false | lower\",
             \"PqSslMode\": \"disable\",
             \"PqHost\": \"{{ pq_host }}\",
             \"PqPort\": \"{{ pq_port }}\",
             \"PqUser\": \"{{ pq_user }}\",
             \"PqPassword\": \"{{ pq_password }}\",
             \"PqDb\": \"{{ pq_db }}\",
     }"
    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: app_config
  when: (app_plugin is defined) and (app_plugin == "postgres.so")
  failed_when: app_config.json.messages[0].level == "ERROR"

- name: print app config
  debug:
    msg: "{{ app_config }}"  
  when: (app_plugin is defined)
    
- name: Create Storage Plugin Config
  uri:
    url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ storage_plugin }}"
    headers:
      Content-Type: application/json
      Accept: application/json    
    user: "{{username}}"
    password: "{{fossul_password}}"
    method: POST
    body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
             \"BackupName\": \"{{ deployment_name }}\",
             \"DeploymentName\": \"{{ deployment_name }}\",
             \"DeploymentType\": \"{{ deployment_type }}\",
             \"PvcDeletionTimeout\": \"{{ pvc_deletion_timeout }}\",
             \"SnapshotTimeoutSeconds\": \"{{ snapshot_timeout }}\",
             \"OverwritePvcOnRestore\": \"{{ overwrite_pcv_on_restore | lower }}\",
             \"RestoreToNewPvc\": \"{{ restore_to_new_pvc | lower }}\",
             
     }"

    body_format: json    
    force_basic_auth: yes
    status_code: [200]
    return_content: yes
  register: storage_config
  when: (storage_plugin is defined) and (storage_plugin == "csi.so")
  failed_when: storage_config.json.messages[0].level == "ERROR"

- name: print storage config
  debug:
    msg: "{{ storage_config }}" 
  when: storage_plugin is defined        
